<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Operation: Smooth]]></title>
  <link href="http://avih.github.com/atom.xml" rel="self"/>
  <link href="http://avih.github.com/"/>
  <updated>2013-04-18T18:32:06+03:00</updated>
  <id>http://avih.github.com/</id>
  <author>
    <name><![CDATA[Avi Halachmi (:avih)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tabstrip animation progress: vsync, newtab page rendering, Lightweight theme]]></title>
    <link href="http://avih.github.com/blog/2013/04/15/tabstrip-animation-progress-vsync/"/>
    <updated>2013-04-15T18:23:00+03:00</updated>
    <id>http://avih.github.com/blog/2013/04/15/tabstrip-animation-progress-vsync</id>
    <content type="html"><![CDATA[<h2 id="tabstrip-animation---progress-2">Tabstrip animation - Progress #2</h2>

<p>The <a href="http://avih.github.com/blog/2013/04/14/tabstrip-project-intro/">previous post</a> introduced the Tabstrip animation project, and some work which has been done so far. This post reviews some more recent related progress.</p>

<h3 id="vsync">Vsync</h3>
<p>During the Paris <a href="http://taras.glek.net/blog/2013/03/26/snappy-number-54-snappy-discussion-in-paris/">snappy work week</a>, Bas and I discussed animation smoothness, and specifically the default 60hz refresh rate which Firefox currently uses. We’ve conducted a very unscientific poll among some attendees at the meeting, and found out that 4 out of 9 laptops had 50Hz monitor refresh rate. The rest had 60. For those with 60Hz, the current refresh system is acceptable, even if not perfect (actually  … <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ee417025%28v=vs.85%29.aspx">Often, developers choose 60 Hz as the refresh rate, not knowing that the enumerated refresh rate from the monitor is approximately 60,000 / 1,001 Hz</a> …), but those with 50Hz monitors will always get a very noticeable jitter during any animation.</p>

<p>So Bas wrote a patch to expose some vblank timing info on windows via widget, and I updated the refresh driver to use this info. The result is decent vsync synchronization on monitors with all refresh rates (you can test the slightly outdated <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856427#c5">Windows try build</a>, which hasn’t landed).</p>

<p>However, by using the vblank timing info and targeting a timer just past it, we’re forced to “lose” some 2-3ms in order to always hit the correct vsync phase - by targeting a bit later than the actual future vblank signal, to make sure we account for the inherent inaccuracies of our timers system (integer ms interval, callback delays/too-early, etc).</p>

<p>Vladimir didn’t like this approach, and so now we’re trying a different one with a thread which blocks on actual vblank signal, and then posts an event when we’ve hit it (no patch yet).</p>

<p>However, this approach is also not perfect. As bas <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856427#c4">noted</a>, the earlier approach allows easier association with different windows/monitors, possibly easier to integrate with fallback to the current code path, and also probably allows easier disabling of vsync on cases where we can’t animate fast enough, or even if gamers want to reduce input/output lag to the minimum possible.</p>

<p>The verdict is not out on this yet, but you can follow the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856427">windows vsync</a> implementation and the global <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=689418">vsync tracking</a> bug.</p>

<h3 id="new-tab-page">New tab page</h3>
<p>Tim taubert has been working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=843853">improving new tab</a> page rendering, which often competes with tab open animation on resources, and may degrade it, especially on slow systems.</p>

<p>While at it, we <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=787698">got distracted</a> by a patch which regressed animation smoothness after changing its trigger from asynchronous (setTimeout 0) to synchronous. The main arguments were that setTimeout delays the animation start more than we should, and therefore synchronous is the way to go. On the other hand, setTimeout causes a relatively small delay, and could result in considerably smoother animation, since its callback is typically (but not always) handled after the entire current event queue is handled.</p>

<p>Eventually, we settled on using requestAnimationFrame which is asynchronous and will not delay the first animation frame, but may still be handled earlier than setTimeout, especially on slow systems. The numbers approve this theory (15 animation frames using setTimeout, 7 frames after changing to synchronous, and 12 frames after switching to rAF).</p>

<p>Looking back at this, however, this <em>was</em> a distraction and somewhat premature discussion. The reason being that these measurements were taken with about:blank page, and not our typical newtab page (which is still too slow to actually measure improved animation when using it, on slow systems).</p>

<p>Note to self: Identify distractions and premature discussions before they consume too much time.</p>

<p>Back to new tab rendering. Trying different semi-random approaches didn’t get us too far:</p>

<p>E.g. replacing XUL flexbox with CSS3 - which gave some improvement but added complexity, we’ve considered delaying the tab animation until after newtab rendering settles, or delaying newtab rendering until after the animation is done (or even disabling tab animation on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=787698">slow systems</a>, especially now that we have tab animation smoothness measuring infrastructure).</p>

<p>We should probably get back to basics and profile the interaction between tab animation and newtab page rendering (which is not so easy, since a lot of stuff is happening when a tab is animating concurrently with new tab page rendering, but we should still do that), get some real real numbers such that we could point some real fingers ;)</p>

<p>Yet another note: While the newtab rendering is apparently high priority for both the performance team and the fx-team, in a hindsight, it’s got too little progress. Maybe we have too many high priority items for the resources we can afford, and we need to get back to re-prioritizing the high priority items?</p>

<h3 id="lightweight-themes-lwt-previously-personas">Lightweight Themes (LWT, previously: Personas)</h3>
<p>MattN and mconley are implementing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=813786">Lightweight themes support for Australis</a>.</p>

<p>As part of their ongoing effort to keep performance in check, they’ve performed animation measurements, comparing performance on various systems and getting some real numbers. They’re summurizing their results on <a href="https://docs.google.com/spreadsheet/ccc?key=0Av64yYvszN34dDdZX0FYWEd3MVpEVzdjYXlFcGpUQmc#gid=0">this spreadsheet</a>.</p>

<p>Their current results with LTW is that tab animation is on par with Australis (at the above spreadsheet, columns AL-AP, rows 46-58), which itself is almost on par with current theme, which is a great achievement, considering Australis is much more complex.</p>

<p>Keep up the great work! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tabstrip animation Project - Introduction]]></title>
    <link href="http://avih.github.com/blog/2013/04/14/tabstrip-project-intro/"/>
    <updated>2013-04-14T18:37:00+03:00</updated>
    <id>http://avih.github.com/blog/2013/04/14/tabstrip-project-intro</id>
    <content type="html"><![CDATA[<p>I’ve had few slow weeks during which I attended some personal matters. Hopefully I’m back in full steam ahead again.</p>

<p>Here’s a summary of recent events.</p>

<h2 id="tabstrip-animation-project">Tabstrip animation project</h2>

<p>As part of the recent Performance team changes (<a href="http://taras.glek.net/blog/2013/03/27/snappy-number-55-snappy-evolution/">1</a>, <a href="http://lawrencemandel.com/2013/03/21/no-more-snappy-meetings-and-other-changes-from-the-snappy-team/">2</a>), I’m now the tech lead for the tabstrip animation project. It’ll require some additional coordinations and regular blog posts, but otherwise, work continues as usual.</p>

<p>The goal of the tabstrip animation project:</p>

<p><em>Make tabstrip animations as smooth and as snappy as possible, both visually and perceptually, by identifying and removing bottlenecks, deficiencies, and perception issues. The ultimate goal here is 60 FPS on a recent Atom CPU on all platforms, with minimal delays</em>.</p>

<p>So far, this work touched several different subjects:
<!--more--></p>

<ul>
  <li>
    <p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=826383">Infrastructure</a> and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=828097">telemetry</a> for tabstrip animation smoothness measurements. This infrastructure already proved very useful with the various subjects below. In general, good measurements allow much more concrete goals, feedback and regression detections. We should strive to use measurements wherever possible, while making sure the measurements are a good representation for the kind of performance which interests us.</p>
  </li>
  <li>
    <p><em>Timing related improvements</em>. Timing is the essence of animation. It’s important for tabstrip animations and for Firefox in general to be able to present each frame at exactly the right time, or else the animation won’t be as smooth as it could be. This is an ongoing effort within Mozilla.</p>
  </li>
</ul>

<p>Following Vladimir’s very useful <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=731974">timers change</a> which recently arrived to the release channel, there were few more issues remaining, mainly <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=590422#c21">timers averaging delay removal</a> which was a long standing bug which also affected tab animation and finally resolved recently, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=689418">vsync</a> synchronization (present frames in sync with the monitor refresh rate) which greatly affects perception of smoothness and is a sore issue since Firefox is now lagging behind Chrome and IE on this (preliminary <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856427#c5">Windows vsync build</a>/patch), and finally, <a href="https://wiki.mozilla.org/Platform/GFX/OffMainThreadCompositing">OMTC</a> which aims at offloading some rendering/animation related tasks off the main thread, and which needs to integrate well with other timing related work.</p>

<ul>
  <li>
    <p><em>Identifying and removal of relevant graphic bottlenecks</em>. Tabstrip animation (and animation in general) is limited by rendering speed. Any improvements here translate to possibly faster and smoother animation, especially on slow computers. We’ve already improved D2D accelerated tab animation by about 25% by <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=838758">improving the gradients cache system</a>, and we still have similar potential improvements with <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=764299">SVG raster caching</a>, and possibly other graphic bottlenecks.</p>
  </li>
  <li>
    <p><em>Theme optimizations</em>. During the development of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=732583">Australis</a> theme, we’ve noticed that its tabs animate slower than the current theme. This was followed up by great <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=837885">ongoing</a> effort and attention from Mike Conley (<a href="http://mikeconley.ca/blog/2013/03/01/australis-curvy-tabs-more-progress/">good post</a>) and Matthew Noorenberghe to measure and improve tab animation speed with Australis. One of the results of this effort was replacing SVG usage with images, but we’d still like to get back to SVG, as it’s more elegant and it scales better for different sizes/DPI.</p>
  </li>
  <li>
    <p><em>Browser issues</em> which affect tab animation. Even if the timing is great, there are no major GFX bottlenecks, and the theme is light to render, tab animation is still affected by implementations within the browser. E.g. the way it’s triggered (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=850163">sync or async</a>, delayed, etc), pages which render concurrently with animation and compete with it on resources (e.g. the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=843853">new tab</a> page) and possibly other similar issues. Tim Taubert from the Firefox team has been working on these issues.</p>
  </li>
  <li>
    <p><em>Regression detection</em>. We’ve already identified an <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=845943">unoptimal talos scroll test</a> during the timer filter removal process, and posted an improvement. We should also add a similar <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=848358">tab animation regression test</a>. In general, it’s important that talos tests are useful, accurate, and are good representation of actual regressions which we care about. <a href="https://blog.mozilla.org/nfroyd/2013/03/25/perf-workweek-talos-discussion/">Nathan</a> is the performance team representative for talos issues, and I’ll help as much as I can.</p>
  </li>
</ul>

<p>I’ll be posting regular progress reports on this subject.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talos - test in a browser, noise detection]]></title>
    <link href="http://avih.github.com/blog/2013/03/11/talos-test-in-a-browser/"/>
    <updated>2013-03-11T11:31:00+02:00</updated>
    <id>http://avih.github.com/blog/2013/03/11/talos-test-in-a-browser</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.mozilla.org/Buildbot/Talos">Talos</a> is a performance tests framework used by Mozilla. It’s invoked on every checkin to the main code repository for early detection of performance regressions. You can find many interesting talos notes on <a href="https://elvis314.wordpress.com/">Joel Maher’s blog</a>.</p>

<p>Talos tests are pretty simple - they perform some task within a browser, then report a completion duration (or a comma-separated list of those) via the <code>tpRecordTime</code> javascript talos call. Talos then logs and processes those values, tries to ignore the noisy bits, and comes up with an average and StdDev values (it also deploys a similar process over several runs of the same test) - which can then be compared to other runs of the same test on different versions/platforms of Firefox.</p>

<h3 id="run-and-develop-talos-tests---without-talos">Run and develop talos tests - without talos</h3>

<p>While <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=845943">updating tscroll</a> talos test, I found that running the test in a browser outside of the talos framework could be useful. The page could be reloaded to re-run the test, allowing quicker iterations of the code. While this isn’t as sterile as the talos run environment, it’s still useful during development. This required substituting <code>tpRecordTime</code> with my own, and also displaying various statistics on the collected data.</p>

<p>I’m not the not the only one who deployed such tactics, and one can find commented out <code>alert</code>s and statistics calculation (which are not reported to talos) on various talos tests.
<!-- more --></p>

<p>So we had the idea of separating this debug stuff from tscroll, such that one can include this <code>talos-debug.js</code> file from any test, and then simply load the page in a browser and get a report of the recorded values together with some statistics.</p>

<p>This file adds a <code>window.talosDebug</code> object which provides some statistical functions (<code>sum</code>, <code>average</code>, <code>median</code> and <code>stddev</code>) and a <code>tpRecordTime</code> method which also displays the stats. It can be controlled by few properties (such as <code>displayData</code> - if set to true, will also display the raw collected data). It also provides automatic detection of the “warmup period” for the data set (see next).</p>

<p>If a global tpRecordTime doesn’t exist, then it maps it to window.talosDebug.tpRecordTime. It’s safe to include this file in any talos test, which will allow running the test in a browser, while it shouldn’t affect the results when running within the talos framework.</p>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=849558">Bug 849558</a> is about adding <code>talos-debug.js</code> to the talos repository. If you touch the talos tests, consider using it instead of rolling out your own. Suggestions are welcome.</p>

<h3 id="automated-tests-and-noise-removal">Automated tests and noise removal</h3>

<p>The talos tscroll test records average frame interval of different real-world-like content types scroll. It showed some regression when I tried to remove a timer compensation mechanism which was actually <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=590422#c21">hurting timimg</a> on most cases these days. When I looked at the tscroll source code, I thought that this isn’t a real regression, and instead, we might be able to improve tscroll.</p>

<p>While modifying tscroll to be less susceptible to timing changes (and also report all the raw intervals instead of the average only), I noticed that typically the first few frame intervals during scroll are more noisy than the rest.</p>

<p>While this isn’t surprising - the browser, layers, etc need to build-up and settle-down, hopefully quickly - it did bring up the question of how to handle this.</p>

<p>Since this is obviously a transitional effect, we probably want to exclude this warm-up period when measuring scroll <em>smoothness</em>. I manually estimated the number of first intervals we should ignore by observing the values. It appeared that ignoring the first 5 values would do the trick for most of the tsctoll sub-tests, and that’s what we agreed to do.</p>

<p>For fun, I also wrote some auto-warmup-detection code, and incorporated it into <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=849558">talos-debug.js</a>. It actually works surprisingly consistently and accurately for the noise patterns (is that an oxymoron??) of scroll intervals, coming up, for instance, with results such as this (notice how stddev goes from 10.8% over all the values, down to 2.8% after ignoring the first 2 out of 42 intervals):</p>

<pre><code>Count: 44
Average: 16.38
Median: 16.88
StdDev: 1.77 (10.83% of average)

Warmup auto-detected: 2
After ignoring first 2 items:
Count: 42
Average: 16.70
Median: 16.89
StdDev: 0.47 (2.79% of average)

Recorded:
5.68, 13.59, [warmed-up:], 17.26, 16.93, 15.95, 17.05, 16.98, 16.08, 16.94, 16.91, 16.39, 16.72, 17.03, 16.03, 16.96, 17.72, 16.03, 17.04, 17.07, 15.92, 16.99, 17.09, 15.94, 16.99, 16.99, 16.01, 16.99, 17.08, 15.96, 16.84, 17.21, 16.11, 16.86, 16.92, 16.21, 16.86, 16.88, 16.19, 16.88, 16.97, 16.21, 16.74, 17.11, 16.21

Stddev from item NN to last:
1.77, 0.66, [warmed-up:], 0.47, 0.46, 0.47, 0.46, 0.46, 0.46, 0.46, 0.46, 0.47, 0.47, 0.48, 0.49, 0.48, 0.49, 0.45, 0.44, 0.44, 0.45, 0.43, 0.43, 0.43, 0.41, 0.42, 0.42, 0.40, 0.41, 0.41, 0.38, 0.39, 0.37, 0.35, 0.37, 0.37, 0.37, 0.38, 0.40, 0.39, 0.42, 0.44, 0.45, 0.64, 0.00
</code></pre>

<p>Looking at this issue with a wider perspective, the subject of warmup period (and noise in general) is common to automated testing. It definitely affects stability of the results, and mostly hurts StdDev - the results appear noisier than they actually are after everything settles down.</p>

<p>Talos uses a <a href="https://elvis314.wordpress.com/2012/03/12/reducing-the-noise-in-talos/">similar strategy</a> (warning - year old post). It runs each test few times, then removes the noisiest result, which is typically the first one.</p>

<p>However, as was noted at some of the comments on that post, the warmup period does carry its own weight and probably shouldn’t be ignored completely.</p>

<p>Maybe if we deploy an automatic warmup detection system similar to the one described above (after it’s tuned and tested with a much wider types of results than just the frame intervals during scroll), we could have a double win - reduce the noise level of the results, AND record the warmup period required for each test. We could then watch this value over time, and if - for a specific test - the warmup period goes up, then it’s probably a regression, and vice verse.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help wanted - Slow touchpad scroll in firefox?]]></title>
    <link href="http://avih.github.com/blog/2013/02/28/slow-touchpad-scroll-in-firefox/"/>
    <updated>2013-02-28T19:33:00+02:00</updated>
    <id>http://avih.github.com/blog/2013/02/28/slow-touchpad-scroll-in-firefox</id>
    <content type="html"><![CDATA[<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=829952">Bug 829952</a> says that scrolling using the touchpad feels slow on some laptops.</p>

<p>Turns out that it’s quite hard to provide a consistent scroll experience on the various platforms which Firefox supports, due to many laptop and touchpad manufacturers, different drivers, OS configurations etc. We could have provided some (or a lot of) configuration UI, but the best solution would be to get it as good as possible out of the box.</p>

<p>And to do that, we need data - and you might be able to help.
<!-- more --></p>

<p>On my system (Asus laptop, Elantech touchpad, Windows 7), the touchpad does produce pixel-accurate scroll in Firefox, but doesn’t send its events as true pixel data (WM_GESTURES windows event). Instead, it sends mouse wheel events, but very rapidly and with fractional line values (it’s a legitimate approach with <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms645617%28v=vs.85%29.aspx">WM_MOUSEWHEEL</a>). This results in Firefox processing it through the “mouse wheel path”, even when the frequency and value of the events allow pixel-accurate positioning of the content.</p>

<p>It was interesting to compare how this kind of event is handled on other browsers, so I wrote a cross-browser testcase which measures <a href="http://avih.github.com/testcases/mozwheel-test-v4.html">just that</a>. The best way to use it is to scroll (e.g. with two fingers) consistently from top to bottom of the touch pad. After each such scroll, the page displays related events values, and the overall scrolled distance (pageYOffset). Reset and repeat this few times, until you can get consistent results. Then, try it also with other browsers.</p>

<p>On my system, if Firefox scroll x pixels for one top-to-bottom two-fingers swipe, then, for the same swipe:<br />
- Chrome scrolls 1.7x<br />
- IE scrolls 6x<br />
- Opera scrolls 13x</p>

<p>Quite a difference! With the numbers (consistently) all over the place. For me, Opera scrolls way too fast (does it treat every fractional mouse wheel event as a full line request?), Firefox scrolls slower than I’d like. Chrome could also be faster, and IE feels a bit too fast for my taste. Obviously, there’s no real right or wrong here, as it’s a very subjective matter.</p>

<p>How do the browsers compare on your system? (Linux? OS X? Windows?) Is Firefox considerably slower than the rest? Does it feel too slow to you? If you have a bugzilla account, you can post directly at the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=829952">bug</a>, otherwise, you’re welcome to leave a comment here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[- Hello World -]]></title>
    <link href="http://avih.github.com/blog/2013/02/28/initial-post/"/>
    <updated>2013-02-28T07:13:00+02:00</updated>
    <id>http://avih.github.com/blog/2013/02/28/initial-post</id>
    <content type="html"><![CDATA[<p>When your manager does your work <a href="http://taras.glek.net/blog/2013/02/22/snappy-number-51-smoothing-tab-animations/">for you</a>, it means something has gone wrong along the way. So here is me fixing it - finally I’ve setup a blog. You can read a bit about me <a href="http://avih.github.com/about">here</a>.</p>

<p>Welcome aboard.</p>

<p>Since I joined the performance team at Mozilla not long ago, I’ve been working on animation smoothness, starting with tab animation, but touching related subjects as well.</p>

<p>In this space, I hope to provide interesting progress notes on this and related subjects.</p>

<p>Stay tuned.</p>
]]></content>
  </entry>
  
</feed>
