<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: talos | Operation: Smooth]]></title>
  <link href="http://avih.github.com/blog/categories/talos/atom.xml" rel="self"/>
  <link href="http://avih.github.com/"/>
  <updated>2015-01-10T23:02:29+02:00</updated>
  <id>http://avih.github.com/</id>
  <author>
    <name><![CDATA[Avi Halachmi (:avih)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tabstrip #5 - TART, talos stress, smooth scrolling]]></title>
    <link href="http://avih.github.com/blog/2013/07/29/tabstrip-number-5-tart/"/>
    <updated>2013-07-29T15:14:00+03:00</updated>
    <id>http://avih.github.com/blog/2013/07/29/tabstrip-number-5-tart</id>
    <content type="html"><![CDATA[<h3 id="talos-stress">Talos stress</h3>
<p>Talos <code>tsvg</code> and <code>tscroll</code> are about to be replaced with <code>tsvgx</code> and <code>tscrollx</code>, respectively (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=897054">bug 897054</a>). The main difference is that the “x” tests stress Firefox by iterating animations as fast as possible, AKA “ASAP mode”.</p>

<p>The old tests were performing some animation and then report overall (or average per frame) duration. However, they were using intervals which were not stressing Firefox at all, making the results almost meaningless WRT svg/scroll performance, and rather mostly sensitive to timing changes.</p>

<p>Stressing Firefox exposed some issues such as paint starvation (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=880036">bug 880036</a>).</p>

<p>Hopefully the new tests will have better correlation to our performance. Joel Maher did (and still does) a lot of work on the Talos side of things with these new tests (a  l-o-t!)</p>

<p>There’s a more technical explanation on this <a href="https://groups.google.com/forum/#!topic/mozilla.dev.platform/RICw5SJhNMo">dev.platform post</a>.</p>

<h3 id="tart---tab-animation-regression-test">TART - Tab Animation Regression Test</h3>

<p>After previous work which went into improving tab animations in Firefox, It’s time to put it into Talos. TART is implemented as an addon which works either stand alone or from within Talos. It measures frames intervals during different animation cases, and it works equally well on mozilla-central and on the UX branch.</p>

<p>TART uses ASAP mode to iterate animation with unlimited frame rate, thus able to expose differences even if under normal conditions it would have been limited to 60Hz.</p>

<p>Joel Maher did most of the talos side of things, and currently the addon awaits review.</p>

<ul>
  <li>TART tests animation on 3 main cases:
    <ul>
      <li>“simple” - open/close of about:blank.</li>
      <li>“icon” - open/close of a blank html page with favicon and a long title.</li>
      <li>“newtab” - open with and without newtab preload.</li>
    </ul>
  </li>
</ul>

<p>“simple” is tested at DPI scaling of 1.0, “icon” at scaling of 1.0 and 2.0, and “newtab” at default scaling.</p>

<ul>
  <li>Each animation produces 3 result values:
    <ul>
      <li>“all” - Overall average interval.</li>
      <li>“half” - Average interval over 50% of the designated duration - from the end of the animation backwards.</li>
      <li>“error” - The difference between the designated duration to the actual one.</li>
    </ul>
  </li>
</ul>

<p>Typically, “half” is the value which corresponds to the stable part of the animation once it’s hopefully settled. Most tab animations have first frame (or few) which are longer than the rest, so the “all” value, while not meaningless, doesn’t tell the whole story.</p>

<ul>
  <li>Some issues which had to be resolved while working on TART:
    <ul>
      <li>Inactive tabs are throttled, so to get accurate timing (intervals, end event), the test is executed from the Chrome window (rather than from the tab itself).</li>
      <li>At DPI scaling of 2.0 at the talos window size, Australis can’t open a second tab without shrinking the first (thus measures animation of more than one tab). Solution: keep the TART tab pinned.</li>
      <li>On OS X, “ASAP mode” doesn’t work with OMTC. Solution for now: disable OMTC for TART.</li>
      <li>On ASAP mode, mostly on OSX, paints can be starved (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=880036">bug 880036</a>). Solution: use a temporary pref to prevent this (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=884955">bug 884955</a>).</li>
      <li>At DPI scaling of 2.0, Australis can only have 3 tabs before it starts overflowing the tabstrip (e.g. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=891450">bug 891450</a>). This made it very hard to test multi-tab shrink/expand in a comparable fashion on m-c and Australis, and eventually this test was dropped for TART v1.</li>
    </ul>
  </li>
</ul>

<p>You can watch TART at <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=848358">bug 848358</a>. Other than a review, it also awaits <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=888899">bug 888899</a> which should enable “ASAP” (stress) mode on OS X as well.</p>

<h3 id="absolute-scroll-smoothness-on-windows">Absolute scroll smoothness on windows</h3>

<p>I was asked by <a href="http://taras.glek.net/">Taras</a> to look into scroll smoothness on windows. Apparently, even after vlad’s great <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=731974">timing improvement</a>, the timers <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=590422">filter removal</a> and making vsync on windows <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856427">work</a>, Firefox still almost never scrolls 100% smoothly on windows.</p>

<p>I did some extensive research into scroll performance of Firefox and other browsers on various platforms, and posted the results at <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=894128">bug 894128</a>. You’ll also find there a a bookmarklet to test scroll performance on any browser.</p>

<p>One interesting observation is that it’s very hard to programatically detect if the scroll is absolutely smooth. Frame intervals apparently don’t tell the whole story (though they are not meaningless), and neither their standard deviation. To judge if the scroll is 100% smooth, it has to be assessed visually.</p>

<ul>
  <li>Some interesting observations from this research:
    <ul>
      <li>On OS X, even with 50% perf per core (and half the cores as well) compared to a fast Windows system, Firefox scrolls much smoother than on Windows, even with OMTC off.</li>
      <li>Firefox may occasionally degrade scroll for several frames for no apparent reason (the content is homogenous). GC/CC?</li>
      <li>OMTC typically doubles the throughput on OS X. On windows OMTC is not yet mature enough to test this.</li>
      <li>Very low intervals variance is <em>not</em> required for 100% smooth scroll (though IE and Chrome mostly manage very low variance compared to Firefox).</li>
      <li>Looks like Chrome and IE use something like APZC during scroll. IE is especially exceptional and is able to practically never drop a frame even on extremely low-end HW (Atom z2760), and also almost never show blanks during scroll.</li>
    </ul>
  </li>
</ul>

<p>Jet has already shown interest in looking into it. Hopefully some day Firefox will scroll as smooth as it can get…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tabstrip #4 - Vsync, newtab, talos, paint starvation]]></title>
    <link href="http://avih.github.com/blog/2013/06/10/tabstrip-4-vsync-and-newtab/"/>
    <updated>2013-06-10T21:38:00+03:00</updated>
    <id>http://avih.github.com/blog/2013/06/10/tabstrip-4-vsync-and-newtab</id>
    <content type="html"><![CDATA[<p>I’ve been slightly behind with my blog updates and there has been some great progress recently, so this post covers a bit more than usual.</p>

<h3 id="vsync">Vsync</h3>

<p>Vsync has finally <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856427">landed</a> on Windows Nightlies not long ago. This means that Firefox will now synchronize its paints with the actual refresh rate of the monitor (if available), which is essential for properly smooth animations. This will work (and is enabled by default) on Windows Vista and later with DWM enabled (“Aero” themes). This also works with WebGL content such as <a href="https://blog.mozilla.org/futurereleases/2013/05/02/epic-citadel-demo-shows-the-power-of-the-web-as-a-platform-for-gaming/">Epic Citadel</a> (<a href="http://www.unrealengine.com/html5/">demo</a>).</p>

<p>Without vsync, Firefox uses 60hz refresh rate by default, which works relatively decently with 60hz displays, but fails badly at displaying properly smooth animations on monitors with other refresh rates (50hz on quite a few laptop displays, 100hz monitors, etc).</p>

<p>However, the current implementation synchronizes with the main display only, so if using a multi-monitor setup, Firefox windows on secondary monitors might not gain from this.</p>

<p>You can control the refresh rate manually by modifying <code>layout.frame_rate</code> at <code>about:config</code> (and restart Firefox). The default value is <code>-1</code> which means “Use vsync if available or 60hz otherwise”. Any other integer value &gt; 0 will force that specific refresh rate.</p>

<p>Naturally, if Firefox can’t animate specific content quickly enough to keep up with the designated rate, then the actual rate will be lower.</p>

<h3 id="aboutnewtab">about:newtab</h3>

<p><code>about:newtab</code> is the default page when opening a new empty tab - with the thumbnails of recently visited pages. It was <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=752839#c11">affecting tab animations badly</a>, to the point of displaying as little as a 3 frames slideshow on low-end systems while animating the tabstrip after pressing the <code>+</code> button to add a tab.</p>

<p><em>Tim Taubert</em> from the Firefox team has done some extensive work <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=843853">recently</a> on several bugs which fall into two categories:</p>

<ul>
  <li>
    <p>Enable newtab <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=791670">preload by default</a>. Newtab preload means that Firefox prepares the newtab page in the background, such that when opening a new tab it’s already rendered and therefore could be quickly displayed with very little processing. It has been working for a while but disabled by default due to accessibility issues. <em>Tim</em> removed this blocker, as well as simplified the preload mechanism and made sure that background preload <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=875509">doesn’t happen during animation</a>. This landed about a week ago and newtab preload is now enabled by default on nightlies.</p>
  </li>
  <li>
    <p>Prevent unnecessary reflows of the newtab page. Reflow is the process of re-calculating the layout of the page, e.g. after window resize, and it’s relatively CPU intensive. Tim discovered that newtab causes <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=876374">unnecessary reflows</a> on several cases, some of them <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=875257">related to preload</a>. He fixed them and also added an automatic test to detect if new reflows are accidentally introduced over time.</p>
  </li>
</ul>

<p>The result of all this work is that animating a new tab with the newtab page is now almost as smooth as opening a blank tab, with few further potential improvements to be worked on soon. Well done!</p>

<h3 id="talos">Talos</h3>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=590422">Bug 590422</a> (remove timers averaging filter) landed more than two months ago and should greatly improve timers accuracy, but it caused few regressions which are still being worked on. Talos <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=845943">tscroll</a> was already modified as a result - which landed about 2 weeks ago, and recently <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=854746">tsvg regressions</a> from this bug were examined as well.</p>

<p>As it turned out, tsvg was rendering SVG animations at 100-200ms intervals, and measuring/reporting the overall runtime as representative of SVG performance. At 4 of the 7 animation tests within the tsvg suite, more than 95% of the time was spent inside <code>setTimeout</code> with the browser completely idle. This resulted in tests which in practice represent the accuracy of timers more than anything else.</p>

<p>To make sure the overall runtime represents actual SVG performance, we should iterate the animation frames as fast as possible. We could do this with <code>setTimeout(loop, 0)</code>, but since Firefox renders to screen at 60hz, and it’s usually smart enough to delay reflow calculations until it’s absolutely necessary, we could end up fully processing only one in few frames when the SVG iterations are quicker than 60Hz, and at tsvg they’re much quicker than that.</p>

<p>To make sure each frame is fully processed on each iteration, we should therefore use <code>requestAnimationFrame</code> (fondly nicked <code>rAF</code>) - which makes sure that once we’re back at the callback, whatever layout changes which we introduced were already fully processed and flushed by Firefox. However, <code>rAF</code> iterates at 60hz by default (or vsync rate), which is usually not fast enough to stress our SVG tests. The solution is to set <code>layout.frame_rate</code> to a high enough value (during these tests) which causes Firefox to iterate and fully-process each frame as fast as possible. <em>Joel Maher</em> helps a lot with testing and deploying the new tsvg tests, and we hope to land it soon.</p>

<p>Making tsvg iterate ASAP also brought us back to tscroll. The recent change of tscroll was to use <code>rAF</code> instead of <code>setTimeout</code> for scroll iterations. However, while it represents scroll smoothness under normal conditions, it doesn’t detect small regressions - since Firefox isn’t actually being stressed and the scroll doesn’t limit our iteration frequency. But stressing the browser with ASAP iteration will lose the real-world simulation of normal refresh rates. So we don’t have a single approach to satisfy both of these needs.</p>

<p>We’re still <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=771326">considering this</a>, but it seems talos will eventually run tscroll twice: once @60hz to make sure we can keep up at real-world scenarios, and once with ASAP iterations to detect performance regressions at much higher resolutions.</p>

<h3 id="paint-starvation">Paint starvation</h3>

<p>While working on tsvg with ASAP iterations, we noticed that Firefox sometimes appears frozen for the entire animation (typically less than 1 second) - it only shows the last animation frame. While this happened when <code>rAF</code> was set to iterate ASAP, we discovered that there are scenarios under perfectly normal conditions which would exhibit exactly the same symptom.</p>

<p>This is now <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=880036">bug 880036</a>. It shows is that if, for some reason, Firefox can’t iterate frames as fast as it wants to (60hz by default), then it may spend too much time on these iteration and prevent other event types from being handled on time. The most noticeable one is the paint event, since it makes Firefox appear frozen, but possibly other events are starved as well.</p>

<p>A patch which seems to fix the issue was already posted, but since this freeze appears to ‘fix’ itself after about 2s, we want to first understand this unfreeze mechanism, and possibly fix it instead of posting a patch to cover up for another bug.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talos - test in a browser, noise detection]]></title>
    <link href="http://avih.github.com/blog/2013/03/11/talos-test-in-a-browser/"/>
    <updated>2013-03-11T11:31:00+02:00</updated>
    <id>http://avih.github.com/blog/2013/03/11/talos-test-in-a-browser</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.mozilla.org/Buildbot/Talos">Talos</a> is a performance tests framework used by Mozilla. It’s invoked on every checkin to the main code repository for early detection of performance regressions. You can find many interesting talos notes on <a href="https://elvis314.wordpress.com/">Joel Maher’s blog</a>.</p>

<p>Talos tests are pretty simple - they perform some task within a browser, then report a completion duration (or a comma-separated list of those) via the <code>tpRecordTime</code> javascript talos call. Talos then logs and processes those values, tries to ignore the noisy bits, and comes up with an average and StdDev values (it also deploys a similar process over several runs of the same test) - which can then be compared to other runs of the same test on different versions/platforms of Firefox.</p>

<h3 id="run-and-develop-talos-tests---without-talos">Run and develop talos tests - without talos</h3>

<p>While <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=845943">updating tscroll</a> talos test, I found that running the test in a browser outside of the talos framework could be useful. The page could be reloaded to re-run the test, allowing quicker iterations of the code. While this isn’t as sterile as the talos run environment, it’s still useful during development. This required substituting <code>tpRecordTime</code> with my own, and also displaying various statistics on the collected data.</p>

<p>I’m not the not the only one who deployed such tactics, and one can find commented out <code>alert</code>s and statistics calculation (which are not reported to talos) on various talos tests.
<!-- more --></p>

<p>So we had the idea of separating this debug stuff from tscroll, such that one can include this <code>talos-debug.js</code> file from any test, and then simply load the page in a browser and get a report of the recorded values together with some statistics.</p>

<p>This file adds a <code>window.talosDebug</code> object which provides some statistical functions (<code>sum</code>, <code>average</code>, <code>median</code> and <code>stddev</code>) and a <code>tpRecordTime</code> method which also displays the stats. It can be controlled by few properties (such as <code>displayData</code> - if set to true, will also display the raw collected data). It also provides automatic detection of the “warmup period” for the data set (see next).</p>

<p>If a global tpRecordTime doesn’t exist, then it maps it to window.talosDebug.tpRecordTime. It’s safe to include this file in any talos test, which will allow running the test in a browser, while it shouldn’t affect the results when running within the talos framework.</p>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=849558">Bug 849558</a> is about adding <code>talos-debug.js</code> to the talos repository. If you touch the talos tests, consider using it instead of rolling out your own. Suggestions are welcome.</p>

<h3 id="automated-tests-and-noise-removal">Automated tests and noise removal</h3>

<p>The talos tscroll test records average frame interval of different real-world-like content types scroll. It showed some regression when I tried to remove a timer compensation mechanism which was actually <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=590422#c21">hurting timimg</a> on most cases these days. When I looked at the tscroll source code, I thought that this isn’t a real regression, and instead, we might be able to improve tscroll.</p>

<p>While modifying tscroll to be less susceptible to timing changes (and also report all the raw intervals instead of the average only), I noticed that typically the first few frame intervals during scroll are more noisy than the rest.</p>

<p>While this isn’t surprising - the browser, layers, etc need to build-up and settle-down, hopefully quickly - it did bring up the question of how to handle this.</p>

<p>Since this is obviously a transitional effect, we probably want to exclude this warm-up period when measuring scroll <em>smoothness</em>. I manually estimated the number of first intervals we should ignore by observing the values. It appeared that ignoring the first 5 values would do the trick for most of the tsctoll sub-tests, and that’s what we agreed to do.</p>

<p>For fun, I also wrote some auto-warmup-detection code, and incorporated it into <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=849558">talos-debug.js</a>. It actually works surprisingly consistently and accurately for the noise patterns (is that an oxymoron??) of scroll intervals, coming up, for instance, with results such as this (notice how stddev goes from 10.8% over all the values, down to 2.8% after ignoring the first 2 out of 42 intervals):</p>

<pre><code>Count: 44
Average: 16.38
Median: 16.88
StdDev: 1.77 (10.83% of average)

Warmup auto-detected: 2
After ignoring first 2 items:
Count: 42
Average: 16.70
Median: 16.89
StdDev: 0.47 (2.79% of average)

Recorded:
5.68, 13.59, [warmed-up:], 17.26, 16.93, 15.95, 17.05, 16.98, 16.08, 16.94, 16.91, 16.39, 16.72, 17.03, 16.03, 16.96, 17.72, 16.03, 17.04, 17.07, 15.92, 16.99, 17.09, 15.94, 16.99, 16.99, 16.01, 16.99, 17.08, 15.96, 16.84, 17.21, 16.11, 16.86, 16.92, 16.21, 16.86, 16.88, 16.19, 16.88, 16.97, 16.21, 16.74, 17.11, 16.21

Stddev from item NN to last:
1.77, 0.66, [warmed-up:], 0.47, 0.46, 0.47, 0.46, 0.46, 0.46, 0.46, 0.46, 0.47, 0.47, 0.48, 0.49, 0.48, 0.49, 0.45, 0.44, 0.44, 0.45, 0.43, 0.43, 0.43, 0.41, 0.42, 0.42, 0.40, 0.41, 0.41, 0.38, 0.39, 0.37, 0.35, 0.37, 0.37, 0.37, 0.38, 0.40, 0.39, 0.42, 0.44, 0.45, 0.64, 0.00
</code></pre>

<p>Looking at this issue with a wider perspective, the subject of warmup period (and noise in general) is common to automated testing. It definitely affects stability of the results, and mostly hurts StdDev - the results appear noisier than they actually are after everything settles down.</p>

<p>Talos uses a <a href="https://elvis314.wordpress.com/2012/03/12/reducing-the-noise-in-talos/">similar strategy</a> (warning - year old post). It runs each test few times, then removes the noisiest result, which is typically the first one.</p>

<p>However, as was noted at some of the comments on that post, the warmup period does carry its own weight and probably shouldn’t be ignored completely.</p>

<p>Maybe if we deploy an automatic warmup detection system similar to the one described above (after it’s tuned and tested with a much wider types of results than just the frame intervals during scroll), we could have a double win - reduce the noise level of the results, AND record the warmup period required for each test. We could then watch this value over time, and if - for a specific test - the warmup period goes up, then it’s probably a regression, and vice verse.</p>

]]></content>
  </entry>
  
</feed>
